#!/bin/bash
# Script de test de restauration complet

echo "üß™ D√©marrage des tests de restauration..."

# Configuration
BACKUP_DIR="test-backups"
RESTORE_DIR="test-restore"
TEST_DATA_DIR="test-data"

# Nettoyer les anciens tests
rm -rf "$BACKUP_DIR" "$RESTORE_DIR" "$TEST_DATA_DIR"

# Cr√©er des donn√©es de test
mkdir -p "$TEST_DATA_DIR"
echo "<html><body>Test homepage</body></html>" > "$TEST_DATA_DIR/homepage.html"
echo '{"posts": [{"id": 1, "title": "Test Post"}]}' > "$TEST_DATA_DIR/api_posts.json"

# Cr√©er une sauvegarde de test
mkdir -p "$BACKUP_DIR"
timestamp=$(date +%Y%m%d_%H%M%S)

for item in "$TEST_DATA_DIR"/*; do
    filename=$(basename "$item")
    cp "$item" "$BACKUP_DIR/${filename%.*}_$timestamp"
    
    # Cr√©er des m√©tadonn√©es
    meta=$(cat << EOF
{
    "url": "https://example.com/$filename",
    "date": "$(date -Iseconds)",
    "hash": "test123",
    "size": $(wc -c < "$item"),
    "encrypted": false
}
EOF
    )
    echo "$meta" > "$BACKUP_DIR/${filename%.*}_$timestamp.meta.json"
done

# Ex√©cuter le script de restauration
echo "üîß Configuration de l'environnement pour le test..."
export BACKUP_DIR="$BACKUP_DIR"
export RESTORE_DIR="$RESTORE_DIR"
export GPG_PASSPHRASE=""

echo "üîÑ Ex√©cution de la restauration..."
python restore.py

# V√©rifier les r√©sultats
echo "üìä V√©rification des r√©sultats..."
if [ -d "$RESTORE_DIR" ] && [ "$(ls -A "$RESTORE_DIR")" ]; then
    echo "‚úÖ Test de restauration r√©ussi"
    echo "üìÅ Contenu restaur√©:"
    find "$RESTORE_DIR" -type f
    
    # V√©rifier le rapport
    if [ -f "$RESTORE_DIR/restore_report.json" ]; then
        echo "üìã Rapport de restauration:"
        cat "$RESTORE_DIR/restore_report.json"
    fi
    
    # Nettoyer
    rm -rf "$BACKUP_DIR" "$RESTORE_DIR" "$TEST_DATA_DIR"
    exit 0
else
    echo "‚ùå √âchec du test de restauration"
    rm -rf "$BACKUP_DIR" "$RESTORE_DIR" "$TEST_DATA_DIR"
    exit 1
fi