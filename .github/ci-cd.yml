name: üõ°Ô∏è CI/CD Complet WordPress.com

on:
  schedule:
    - cron: '0 2 * * *'  # Tous les jours √† 2h
  workflow_dispatch:
    inputs:
      restore-environment:
        description: 'Environment to restore to'
        required: false
        default: 'staging'
  push:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  SITE_URL: ${{ vars.SITE_URL }}
  BACKUP_DIR: 'backups'
  RESTORE_DIR: 'restore'
  RETENTION_DAYS: '30'
  GPG_RECIPIENT: ${{ secrets.GPG_RECIPIENT }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4

      - name: üêç Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Installation des d√©pendances
        run: pip install -r requirements.txt

      - name: üîí Scan de s√©curit√© Bandit
        run: |
          pip install bandit
          bandit -r . -f html -o security-report.html || true

      - name: üìä Upload du rapport de s√©curit√©
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.html

  backup:
    runs-on: ubuntu-latest
    needs: security-scan
    environment: production
    
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4

      - name: üêç Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Installation des d√©pendances
        run: pip install -r requirements.txt

      - name: üîë Configuration GPG
        run: |
          gpg --batch --import-options import-restore --import <<< "${{ secrets.GPG_PRIVATE_KEY }}"
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --import <<< "${{ secrets.GPG_PRIVATE_KEY }}"

      - name: üíæ Ex√©cution de la sauvegarde
        env:
          SITE_URL: ${{ env.SITE_URL }}
          BACKUP_DIR: ${{ env.BACKUP_DIR }}
          GPG_RECIPIENT: ${{ env.GPG_RECIPIENT }}
          RETENTION_DAYS: ${{ env.RETENTION_DAYS }}
        run: python backup_script.py

      - name: üì§ Archivage des sauvegardes
        uses: actions/upload-artifact@v3
        with:
          name: wordpress-backup-${{ github.run_id }}
          path: ${{ env.BACKUP_DIR }}/
          retention-days: ${{ env.RETENTION_DAYS }}

  restore-staging:
    runs-on: ubuntu-latest
    needs: backup
    if: github.event_name == 'workflow_dispatch' || github.event.inputs.restore-environment == 'staging'
    environment: staging
    
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4

      - name: üêç Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Installation des d√©pendances
        run: pip install -r requirements.txt

      - name: üì• T√©l√©chargement des sauvegardes
        uses: actions/download-artifact@v3
        with:
          name: wordpress-backup-${{ github.run_id }}
          path: ${{ env.BACKUP_DIR }}

      - name: üîë Configuration GPG
        run: |
          echo "${{ secrets.GPG_PASSPHRASE }}" > /tmp/passphrase
          chmod 600 /tmp/passphrase

      - name: üîÑ Restauration sur staging
        env:
          BACKUP_DIR: ${{ env.BACKUP_DIR }}
          RESTORE_DIR: ${{ env.RESTORE_DIR }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: python restore.py

      - name: üìä Rapport de restauration
        uses: actions/upload-artifact@v3
        with:
          name: restore-report-staging
          path: ${{ env.RESTORE_DIR }}/

  integration-test:
    runs-on: ubuntu-latest
    needs: restore-staging
    environment: staging
    
    steps:
      - name: üß™ Tests d'int√©gration
        run: |
          # Tests de v√©rification que la restauration a fonctionn√©
          python -c "
          import json
          import os
          report_path = os.path.join('${{ env.RESTORE_DIR }}', 'restore_report.json')
          with open(report_path, 'r') as f:
              report = json.load(f)
          print(f'Rapport de restauration: {report}')
          exit(0 if report['restored_items'] > 0 else 1)
          "

  notification:
    runs-on: ubuntu-latest
    needs: [backup, integration-test]
    if: always()
    
    steps:
      - name: üì± Notification de statut
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Backup et restauration r√©ussis"
            # Ajouter notification WhatsApp/Email ici
          else
            echo "‚ùå √âchec du processus"
            # Ajouter notification d'erreur ici
          finame: üõ°Ô∏è CI/CD WordPress.com

on:
  schedule:
    - cron: '0 */6 * * *'  # Toutes les 6 heures
  workflow_dispatch:
  push:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  SITE_URL: ${{ vars.SITE_URL }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run Bandit security scan
        run: bandit -r . -f html -o security-report.html

  monitor:
    runs-on: ubuntu-latest
    needs: security-scan
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run monitoring
        env:
          SITE_URL: ${{ env.SITE_URL }}
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_WHATSAPP_FROM: ${{ secrets.TWILIO_WHATSAPP_FROM }}
          TWILIO_WHATSAPP_TO: ${{ secrets.TWILIO_WHATSAPP_TO }}
        run: python monitor.py

  backup:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run backup
        env:
          SITE_URL: ${{ env.SITE_URL }}
        run: python backup_script.py
      - name: Upload backup artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wordpress-backup
          path: backups/