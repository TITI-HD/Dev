name: CI/CD Pipeline WordPress

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run security scan
        run: python scripts/security_monitor.py --monitor &
        env:
          CONFIG_FILE: config/production.ini
          WPSCAN_API: ${{ secrets.WPSCAN_API }}

      - name: Run unit tests (à compléter selon projet)
        run: echo "Tests unitaires à définir"

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Add server to known_hosts
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${SERVER_SSH_PORT} ${SERVER_HOST} >> ~/.ssh/known_hosts

      - name: Backup remote wp-content
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}
          DEPLOY_PATH: /var/www/html
        run: |
          ssh -p ${SERVER_SSH_PORT} ${SERVER_USER}@${SERVER_HOST} \
            "cp -r ${DEPLOY_PATH}/wp-content ${DEPLOY_PATH}/wp-content-backup-$(date +%Y%m%d%H%M%S)"

      - name: Deploy files (rsync delta)
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}
          DEPLOY_PATH: /var/www/html
        run: |
          rsync -avz --delete --partial --progress -e "ssh -p ${SERVER_SSH_PORT}" \
            ./wp-content/ ${SERVER_USER}@${SERVER_HOST}:${DEPLOY_PATH}/wp-content/

      - name: Run remote WP post-deploy checks (health & migrations)
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}
        run: |
          ssh -p ${SERVER_SSH_PORT} ${SERVER_USER}@${SERVER_HOST} \
            "cd /var/www/html && wp core is-installed && wp cache flush && php -v"

      - name: Vérification HTTP post-déploiement
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          curl -f http://${SERVER_HOST}/ || exit 1

      - name: Notify Slack on success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"Déploiement sur production réussi : ${{ github.sha }}\"}" \
            ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack on failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"Échec du déploiement sur production : ${{ github.sha }}\"}" \
            ${{ secrets.SLACK_WEBHOOK }}

      - name: Run deploy script
        run: python scripts/deploy.py
        env:
          SSH_KEY_PATH: /home/runner/.ssh/id_rsa
          PROD_SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
          # Ajoute ici les variables AWS si nécessaires :
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET }}

      - name: Post deployment check
        run: |
          python -c "
import requests
resp = requests.get('https://oupssecuretest.wordpress.com')
exit(0 if resp.status_code == 200 else 1)
"
