name: 🛡️ CI/CD Complet WordPress.com

on:
  schedule:
    - cron: '0 2 * * *'  # Tous les jours à 2h
  workflow_dispatch:
    inputs:
      restore-environment:
        description: 'Environment to restore to'
        required: false
        default: 'staging'
  push:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  SITE_URL: ${{ vars.SITE_URL }}
  BACKUP_DIR: 'backups'
  RESTORE_DIR: 'restore'
  RETENTION_DAYS: '30'
  GPG_RECIPIENT: ${{ secrets.GPG_RECIPIENT }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Installation des dépendances
        run: pip install -r requirements.txt

      - name: 🔒 Scan de sécurité Bandit
        run: |
          pip install bandit
          bandit -r . -f html -o security-report.html || true

      - name: 📊 Upload du rapport de sécurité
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.html

  backup:
    runs-on: ubuntu-latest
    needs: security-scan
    environment: production
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Installation des dépendances
        run: pip install -r requirements.txt

      - name: 🔑 Configuration GPG
        run: |
          gpg --batch --import-options import-restore --import <<< "${{ secrets.GPG_PRIVATE_KEY }}"
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --import <<< "${{ secrets.GPG_PRIVATE_KEY }}"

      - name: 💾 Exécution de la sauvegarde
        env:
          SITE_URL: ${{ env.SITE_URL }}
          BACKUP_DIR: ${{ env.BACKUP_DIR }}
          GPG_RECIPIENT: ${{ env.GPG_RECIPIENT }}
          RETENTION_DAYS: ${{ env.RETENTION_DAYS }}
        run: python backup_script.py

      - name: 📤 Archivage des sauvegardes
        uses: actions/upload-artifact@v3
        with:
          name: wordpress-backup-${{ github.run_id }}
          path: ${{ env.BACKUP_DIR }}/
          retention-days: ${{ env.RETENTION_DAYS }}

  restore-staging:
    runs-on: ubuntu-latest
    needs: backup
    if: github.event_name == 'workflow_dispatch' || github.event.inputs.restore-environment == 'staging'
    environment: staging
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🐍 Configuration de Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Installation des dépendances
        run: pip install -r requirements.txt

      - name: 📥 Téléchargement des sauvegardes
        uses: actions/download-artifact@v3
        with:
          name: wordpress-backup-${{ github.run_id }}
          path: ${{ env.BACKUP_DIR }}

      - name: 🔑 Configuration GPG
        run: |
          echo "${{ secrets.GPG_PASSPHRASE }}" > /tmp/passphrase
          chmod 600 /tmp/passphrase

      - name: 🔄 Restauration sur staging
        env:
          BACKUP_DIR: ${{ env.BACKUP_DIR }}
          RESTORE_DIR: ${{ env.RESTORE_DIR }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: python restore.py

      - name: 📊 Rapport de restauration
        uses: actions/upload-artifact@v3
        with:
          name: restore-report-staging
          path: ${{ env.RESTORE_DIR }}/

  integration-test:
    runs-on: ubuntu-latest
    needs: restore-staging
    environment: staging
    
    steps:
      - name: 🧪 Tests d'intégration
        run: |
          # Tests de vérification que la restauration a fonctionné
          python -c "
          import json
          import os
          report_path = os.path.join('${{ env.RESTORE_DIR }}', 'restore_report.json')
          with open(report_path, 'r') as f:
              report = json.load(f)
          print(f'Rapport de restauration: {report}')
          exit(0 if report['restored_items'] > 0 else 1)
          "

  notification:
    runs-on: ubuntu-latest
    needs: [backup, integration-test]
    if: always()
    
    steps:
      - name: 📱 Notification de statut
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Backup et restauration réussis"
            # Ajouter notification WhatsApp/Email ici
          else
            echo "❌ Échec du processus"
            # Ajouter notification d'erreur ici
          fi