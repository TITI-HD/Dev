name: WordPress CI/CD - Full Monitoring

on:
  push:
    branches: ["main"]
  pull_request:
  schedule:
    - cron: '0 */3 * * *'   # Monitoring toutes les 3h
    - cron: '0 8 * * *'     # Rapport quotidien à 08:00

env:
  SITE_URL: "https://oupssecuretest.wordpress.com"
  BACKUP_DIR: "backups"
  RESTORE_DIR: "restored-backups"

jobs:
  setup-and-monitor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Installer Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Cache pip pour accélérer les builds
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      # Créer venv et installer dépendances
      - name: Installer dépendances Python
        run: |
          python -m venv .venv
          # Activer venv dans bash
          source .venv/bin/activate
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Installer modules manquants si besoin
          pip install schedule requests python-dateutil

      # Vérifier imports
      - name: Vérifier imports Python
        run: |
          source .venv/bin/activate
          python -c "import monitor"
          python -c "import wp_backup_restore"
          python -c "import report_generator"

      # Backup WordPress
      - name: Sauvegarde WordPress
        run: |
          source .venv/bin/activate
          python wp_backup_restore.py backup
          mkdir -p backup_report
          if [ -d "$BACKUP_DIR" ] && [ "$(ls -A $BACKUP_DIR)" ]; then
            count=$(find "$BACKUP_DIR" -type f | wc -l)
            echo "Sauvegarde OK ($count fichiers)" > backup_report/report_backup.md
          else
            echo "Échec sauvegarde" > backup_report/report_backup.md
            exit 1
        continue-on-error: false
      - uses: actions/upload-artifact@v4
        with:
          name: wordpress-backups-${{ github.run_id }}
          path: |
            $BACKUP_DIR/
            backup_report/

      # Restore WordPress
      - name: Restauration WordPress
        run: |
          source .venv/bin/activate
          python wp_backup_restore.py restore "$RESTORE_DIR"
          mkdir -p restore_report
          if [ -d "$RESTORE_DIR" ] && [ "$(ls -A $RESTORE_DIR)" ]; then
            count=$(find "$RESTORE_DIR" -type f | wc -l)
            echo "Restauration OK ($count fichiers)" > restore_report/report_restore.md
          else
            echo "Échec restauration" > restore_report/report_restore.md
            exit 1
      - uses: actions/upload-artifact@v4
        with:
          name: wordpress-restore-${{ github.run_id }}
          path: restore_report/

      # Lancer le monitoring
      - name: Monitoring WordPress
        run: |
          source .venv/bin/activate
          mkdir -p monitor_data
          python monitor.py --scheduled
      - uses: actions/upload-artifact@v4
        with:
          name: monitoring-${{ github.run_id }}
          path: monitor_data/

      # Rapport quotidien
      - name: Rapport quotidien
        if: github.event_name == 'schedule'
        run: |
          source .venv/bin/activate
          python report_generator.py --days 7 > report_7_days.txt
      - uses: actions/upload-artifact@v4
        with:
          name: daily-report-${{ github.run_id }}
          path: report_7_days.txt
