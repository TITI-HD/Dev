name: WordPress CI/CD - Validation, Sauvegarde et Restauration

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: 🐍 Configurer Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 Installer les dépendances
        run: pip install -r requirements.txt
      
      - name: ✅ Valider les modules Python
        run: |
          python -c "import monitor; print('✅ Module monitor importé avec succès')"
          python -c "import backup; print('✅ Module backup importé avec succès')"
          python -c "import app; print('✅ Module app importé avec succès')"
          python -c "import restore; print('✅ Module restore importé avec succès')"
          echo "# 📊 Rapport CI/CD WordPress" > report.md
          echo "## ✅ Validation" >> report.md
          echo "- Tous les modules Python ont été importés avec succès." >> report.md

      - name: 📤 Sauvegarder le rapport provisoire
        uses: actions/upload-artifact@v4
        with:
          name: report-part
          path: report.md

  backup-test:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - name: 🐍 Configurer Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: 📦 Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 💾 Exécuter le script de sauvegarde
        run: python backup.py

      - name: 🔍 Vérifier les fichiers de sauvegarde
        run: |
          count=$(ls backups/ | wc -l)
          if [ "$count" -gt 0 ]; then
            echo "- ✅ Sauvegarde réussie ($count fichiers)" >> report.md
            echo "- Hash: $(sha256sum backups/* | head -n 1 | cut -d ' ' -f1)" >> report.md
          else
            echo "❌ Échec du test de sauvegarde" >> report.md
            exit 1
          fi

      - name: 🧪 Lancer les tests unitaires
        run: python -m unittest discover -s . -p "test_*.py"

      - name: 📤 Sauvegarder artefacts
        uses: actions/upload-artifact@v4
        with:
          name: wordpress-backups
          path: backups/

      - name: 📤 Sauvegarder rapport partiel
        uses: actions/upload-artifact@v4
        with:
          name: report-part
          path: report.md

  restore-test:
    runs-on: ubuntu-latest
    needs: backup-test
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Configurer Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 📦 Installer les dépendances
        run: pip install -r requirements.txt

      - name: 📥 Télécharger les artefacts (backups)
        uses: actions/download-artifact@v4
        with:
          name: wordpress-backups
          path: restored-backups

      - name: 🔍 Vérifier les fichiers restaurés
        run: |
          count=$(ls restored-backups/ | wc -l)
          if [ "$count" -gt 0 ]; then
            echo "- ✅ Restauration réussie ($count fichiers)" >> report.md
          else
            echo "❌ Aucun fichier restauré" >> report.md
            exit 1
          fi

      - name: 🔄 Exécuter le script de restauration
        run: python restore.py restored-backups

      - name: 📊 Attacher rapport final combiné
        uses: actions/upload-artifact@v4
        with:
          name: rapport-final
          path: report.md

      - name: 📢 Publier rapport dans Summary GitHub
        run: |
          echo "### 🚀 Rapport Final CI/CD" >> $GITHUB_STEP_SUMMARY
          cat report.md >> $GITHUB_STEP_SUMMARY

      