on:
  schedule:
    - cron: '0 */3 * * *'   # Tous les 3h
  push:
    branches: ["main"]
  workflow_dispatch:         # Lancement manuel possible

env:
  SITE_URL: "https://oupssecuretest.wordpress.com"
  MONITOR_DIR: "monitor_data"
  BACKUP_DIR: "backups"
  ALERT_EMAIL: "danieltiti882@gmail.com"
  SMTP_SERVER: "smtp.gmail.com"
  SMTP_PORT: "587"
  SMTP_USER: "danieltiti882@gmail.com"
  SMTP_PASS: "${{ secrets.SMTP_PASS }}"
  LOG_RETENTION_DAYS: "30"
  CHECK_INTERVAL_HOURS: "3"

jobs:
  monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      - name: Create necessary folders
        run: |
          mkdir -p ${{ env.MONITOR_DIR }}
          mkdir -p ${{ env.BACKUP_DIR }}

      - name: Run WP Monitor (scan + backup + report)
        run: python monitor.py --once

      - name: Check TXT report generation
        run: |
          if ls ${{ env.MONITOR_DIR }}/report_*.txt 1> /dev/null 2>&1; then
            echo "Rapport TXT généré avec succès ✅"
          else
            echo "ERREUR : rapport TXT non généré ❌"
            exit 1
          fi

      - name: List latest backup JSON
        run: |
          ls -lt ${{ env.BACKUP_DIR }}/backup_*.json | head -1

      - name: Send latest report via email
        run: |
          python - << 'EOF'
import os, smtplib
from email.mime.text import MIMEText
from pathlib import Path

monitor_dir = Path(os.environ["MONITOR_DIR"])
txt_files = sorted(monitor_dir.glob("report_*.txt"), reverse=True)
if not txt_files:
    print("Aucun rapport TXT à envoyer")
    exit(1)

latest_txt = txt_files[0]
content = latest_txt.read_text(encoding="utf-8")

msg = MIMEText(content, "plain")
msg["Subject"] = f"WordPress.com Monitoring Report - {os.environ['SITE_URL']}"
msg["From"] = os.environ["SMTP_USER"]
msg["To"] = os.environ["ALERT_EMAIL"]

try:
    server = smtplib.SMTP(os.environ["SMTP_SERVER"], int(os.environ["SMTP_PORT"]))
    server.starttls()
    server.login(os.environ["SMTP_USER"], os.environ["SMTP_PASS"])
    server.sendmail(os.environ["SMTP_USER"], os.environ["ALERT_EMAIL"], msg.as_string())
    server.quit()
    print(f"Email envoyé à {os.environ['ALERT_EMAIL']} ✅")
except Exception as e:
    print(f"Erreur envoi email: {e}")
    exit(1)
EOF