name: WordPress CI/CD - Full Monitoring & Backup

on:
  push:
    branches: ["main"]
  pull_request:
  schedule:
    - cron: '0 */3 * * *'   # Monitoring toutes les 3h
    - cron: '0 8 * * *'     # Rapport quotidien à 08:00
  workflow_dispatch:        # Lancement manuel possible

env:
  SITE_URL: "https://oupssecuretest.wordpress.com"
  BACKUP_DIR: "backups"
  RESTORE_DIR: "restored-backups"
  ALERT_EMAIL: "danieltiti882@gmail.com"
  SMTP_SERVER: "smtp.gmail.com"
  SMTP_PORT: 587
  SMTP_USER: "danieltiti882@gmail.com"
  SMTP_PASS: ${{ secrets.SMTP_PASS }}

jobs:
  wordpress-full-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install Python dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install schedule requests python-dateutil

      - name: Verify Python imports
        run: |
          source .venv/bin/activate
          python -c "import monitor; print('✓ monitor importé')"
          python -c "import wp_backup_restore; print('✓ wp_backup_restore importé')"

      - name: Create necessary directories
        run: |
          mkdir -p $BACKUP_DIR
          mkdir -p $RESTORE_DIR
          mkdir -p monitor_data
          mkdir -p backup_reports
          mkdir -p restore_reports

      - name: Run WordPress backup
        run: |
          source .venv/bin/activate
          python wp_backup_restore.py backup
          if [ -d "$BACKUP_DIR" ] && [ "$(ls -A $BACKUP_DIR 2>/dev/null)" ]; then
            count=$(find "$BACKUP_DIR" -type f | wc -l)
            echo "✅ Sauvegarde OK ($count fichiers)" > backup_reports/report_backup.md
          else
            echo "❌ Échec sauvegarde - dossier vide ou inexistant" > backup_reports/report_backup.md
            exit 1
          fi

      - name: Run WordPress restore test
        run: |
          source .venv/bin/activate
          python wp_backup_restore.py restore --dir "$RESTORE_DIR"
          if [ -d "$RESTORE_DIR" ] && [ "$(ls -A $RESTORE_DIR 2>/dev/null)" ]; then
            count=$(find "$RESTORE_DIR" -type f | wc -l)
            echo "✅ Restauration OK ($count fichiers)" > restore_reports/report_restore.md
          else
            echo "❌ Échec restauration - dossier vide ou inexistant" > restore_reports/report_restore.md
            exit 1
          fi

      - name: Run WordPress monitoring
        run: |
          source .venv/bin/activate
          python monitor.py --once

      - name: Generate daily report (if scheduled)
        if: github.event_name == 'schedule'
        run: |
          source .venv/bin/activate
          python -c "
          import json
          from datetime import datetime
          report = {'date': datetime.now().isoformat(), 'status': 'completed', 'site_url': '$SITE_URL'}
          with open('daily_report.json', 'w') as f:
              json.dump(report, f, indent=2)
          print('Rapport quotidien généré')
          "

      - name: Upload backup artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wordpress-backups-${{ github.run_number }}
          path: |
            $BACKUP_DIR/
            backup_reports/

      - name: Upload restore artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wordpress-restore-${{ github.run_number }}
          path: |
            $RESTORE_DIR/
            restore_reports/

      - name: Upload monitoring data
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-data-${{ github.run_number }}
          path: |
            monitor_data/
            daily_report.json

  wordpress-manual-restore:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: wordpress-full-monitoring
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download backup artifacts
        uses: actions/download-artifact@v4
        with:
          name: wordpress-backups-${{ github.run_number }}
          path: ./

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install requests

      - name: Run manual restore
        run: |
          source .venv/bin/activate
          RESTORE_DIR="manual-restore-$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$RESTORE_DIR"
          python wp_backup_restore.py restore --dir "$RESTORE_DIR"
          echo "Restauration manuelle terminée dans: $RESTORE_DIR"

      - name: Upload manual restore
        uses: actions/upload-artifact@v4
        with:
          name: manual-restore-${{ github.run_number }}
          path: manual-restore-*/